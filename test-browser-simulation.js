// Script para simular o comportamento do navegador
// Usando fetch nativo do Node.js (v18+)

async function testBrowserSimulation() {
  console.log('üåê [BROWSER-SIM] Iniciando simula√ß√£o do navegador...\n');
  
  let html = '';
  
  try {
    // Teste 1: Verificar se o servidor est√° respondendo
    console.log('üì° [TESTE 1] Verificando servidor...');
    const response = await fetch('http://localhost:8080/');
    console.log(`Status: ${response.status}`);
    console.log(`Content-Type: ${response.headers.get('content-type')}`);
    
    if (response.ok) {
      html = await response.text();
      console.log(`HTML Length: ${html.length} caracteres`);
      
      // Verificar se cont√©m elementos React b√°sicos
      if (html.includes('id="root"')) {
        console.log('‚úÖ Elemento root encontrado');
      } else {
        console.log('‚ùå Elemento root N√ÉO encontrado');
      }
      
      if (html.includes('script')) {
        console.log('‚úÖ Scripts encontrados');
      } else {
        console.log('‚ùå Scripts N√ÉO encontrados');
      }
      
      // Mostrar in√≠cio do HTML
      console.log('\nüìÑ In√≠cio do HTML:');
      console.log(html.substring(0, 500) + '...');
      
    } else {
      console.log('‚ùå Servidor n√£o est√° respondendo corretamente');
    }
    
    console.log('\n' + '='.repeat(50));
    
    // Teste 2: Verificar rota espec√≠fica
    console.log('üì° [TESTE 2] Verificando rota /teste-estoque...');
    const testResponse = await fetch('http://localhost:8080/teste-estoque');
    console.log(`Status: ${testResponse.status}`);
    
    if (testResponse.ok) {
      const testHtml = await testResponse.text();
      console.log(`HTML Length: ${testHtml.length} caracteres`);
      
      // Verificar se √© o mesmo HTML (SPA)
      if (testHtml.length === html.length) {
        console.log('‚úÖ SPA detectado - mesmo HTML para todas as rotas');
      } else {
        console.log('‚ö†Ô∏è HTML diferente para rota espec√≠fica');
      }
    }
    
    console.log('\n' + '='.repeat(50));
    
    // Teste 3: Verificar assets
    console.log('üì° [TESTE 3] Verificando assets...');
    
    // Tentar encontrar o arquivo JS principal
    const jsMatch = html.match(/src="([^"]*\.js[^"]*)"/);
    if (jsMatch) {
      const jsUrl = jsMatch[1].startsWith('/') ? 
        `http://localhost:8080${jsMatch[1]}` : 
        `http://localhost:8080/${jsMatch[1]}`;
      
      console.log(`Testando JS: ${jsUrl}`);
      const jsResponse = await fetch(jsUrl);
      console.log(`JS Status: ${jsResponse.status}`);
      
      if (jsResponse.ok) {
        const jsContent = await jsResponse.text();
        console.log(`JS Length: ${jsContent.length} caracteres`);
        
        // Verificar se cont√©m nossos componentes
        if (jsContent.includes('TesteEstoque')) {
          console.log('‚úÖ Componente TesteEstoque encontrado no JS');
        } else {
          console.log('‚ùå Componente TesteEstoque N√ÉO encontrado no JS');
        }
        
        if (jsContent.includes('Estoque')) {
          console.log('‚úÖ Componente Estoque encontrado no JS');
        } else {
          console.log('‚ùå Componente Estoque N√ÉO encontrado no JS');
        }
      }
    } else {
      console.log('‚ùå Arquivo JS principal n√£o encontrado no HTML');
    }
    
  } catch (error) {
    console.error('‚ùå Erro na simula√ß√£o:', error.message);
  }
  
  console.log('\nüèÅ [BROWSER-SIM] Simula√ß√£o conclu√≠da');
}

// Executar teste
testBrowserSimulation();