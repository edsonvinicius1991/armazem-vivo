import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_PUBLISHABLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function insertSampleDataSQL() {
  console.log('üì¶ Inserindo dados de exemplo via SQL...\n');

  try {
    // SQL para inserir produtos
    const sqlProdutos = `
      INSERT INTO produtos (sku, nome, descricao, categoria, unidade, codigo_barras, peso_kg, altura_cm, largura_cm, profundidade_cm, custo_unitario, preco_venda)
      VALUES 
        ('PROD001', 'Paracetamol 500mg', 'Analg√©sico e antit√©rmico', 'Medicamentos', 'COMPRIMIDO', '7891234567890', 0.001, 1, 1, 0.5, 0.15, 0.25),
        ('PROD002', 'Dipirona 500mg', 'Analg√©sico e antit√©rmico', 'Medicamentos', 'COMPRIMIDO', '7891234567891', 0.001, 1, 1, 0.5, 0.12, 0.20),
        ('PROD003', 'Ibuprofeno 600mg', 'Anti-inflamat√≥rio', 'Medicamentos', 'COMPRIMIDO', '7891234567892', 0.002, 1.2, 1.2, 0.6, 0.30, 0.50),
        ('PROD004', 'Soro Fisiol√≥gico 500ml', 'Solu√ß√£o salina est√©ril', 'Solu√ß√µes', 'FRASCO', '7891234567893', 0.5, 15, 8, 8, 2.50, 4.00),
        ('PROD005', 'Gaze Est√©ril 10x10cm', 'Gaze est√©ril para curativos', 'Material Hospitalar', 'PACOTE', '7891234567894', 0.05, 2, 12, 12, 1.20, 2.00)
      ON CONFLICT (sku) DO NOTHING
      RETURNING id, sku, nome;
    `;

    console.log('1. Inserindo produtos...');
    const { data: produtosResult, error: produtosError } = await supabase.rpc('exec_sql', { 
      sql_query: sqlProdutos 
    });

    if (produtosError) {
      console.error('‚ùå Erro ao inserir produtos:', produtosError.message);
      
      // Tentar inser√ß√£o direta se RPC n√£o funcionar
      console.log('   Tentando inser√ß√£o direta...');
      const { data: produtosDireto, error: produtosDiretoError } = await supabase
        .from('produtos')
        .upsert([
          {
            sku: 'PROD001',
            nome: 'Paracetamol 500mg',
            descricao: 'Analg√©sico e antit√©rmico',
            categoria: 'Medicamentos',
            unidade: 'COMPRIMIDO',
            codigo_barras: '7891234567890',
            peso_kg: 0.001,
            altura_cm: 1,
            largura_cm: 1,
            profundidade_cm: 0.5,
            custo_unitario: 0.15,
            preco_venda: 0.25
          }
        ], { onConflict: 'sku' })
        .select();

      if (produtosDiretoError) {
        console.error('‚ùå Erro na inser√ß√£o direta:', produtosDiretoError.message);
        console.log('   Isso indica que as pol√≠ticas RLS est√£o ativas e bloqueando a inser√ß√£o.');
        console.log('   Voc√™ precisa configurar as pol√≠ticas RLS ou usar um usu√°rio autenticado.');
        return;
      }
      
      console.log('‚úÖ Inser√ß√£o direta funcionou');
    } else {
      console.log('‚úÖ Produtos inseridos via SQL');
    }

    // Buscar produtos existentes para criar lotes
    console.log('\n2. Buscando produtos existentes...');
    const { data: produtos, error: buscaError } = await supabase
      .from('produtos')
      .select('id, sku, nome')
      .in('sku', ['PROD001', 'PROD002', 'PROD003', 'PROD004', 'PROD005']);

    if (buscaError) {
      console.error('‚ùå Erro ao buscar produtos:', buscaError.message);
      return;
    }

    if (!produtos || produtos.length === 0) {
      console.log('‚ùå Nenhum produto encontrado. Verifique se os produtos foram inseridos.');
      return;
    }

    console.log(`‚úÖ ${produtos.length} produtos encontrados`);

    // Criar mapeamento de SKU para ID
    const produtoMap = {};
    produtos.forEach(produto => {
      produtoMap[produto.sku] = produto.id;
    });

    // Inserir lotes
    console.log('\n3. Inserindo lotes...');
    const lotes = [
      {
        produto_id: produtoMap['PROD001'],
        numero_lote: 'LT001-2024',
        data_fabricacao: '2024-01-15',
        data_validade: '2026-01-15',
        quantidade_inicial: 1000,
        quantidade_atual: 850,
        bloqueado: false
      },
      {
        produto_id: produtoMap['PROD001'],
        numero_lote: 'LT002-2024',
        data_fabricacao: '2024-03-10',
        data_validade: '2026-03-10',
        quantidade_inicial: 500,
        quantidade_atual: 500,
        bloqueado: false
      },
      {
        produto_id: produtoMap['PROD002'],
        numero_lote: 'LT003-2024',
        data_fabricacao: '2024-02-20',
        data_validade: '2026-02-20',
        quantidade_inicial: 750,
        quantidade_atual: 600,
        bloqueado: false
      },
      {
        produto_id: produtoMap['PROD003'],
        numero_lote: 'LT004-2024',
        data_fabricacao: '2024-01-05',
        data_validade: '2025-01-05',
        quantidade_inicial: 300,
        quantidade_atual: 50,
        bloqueado: false
      },
      {
        produto_id: produtoMap['PROD004'],
        numero_lote: 'LT005-2024',
        data_fabricacao: '2024-04-01',
        data_validade: '2027-04-01',
        quantidade_inicial: 200,
        quantidade_atual: 180,
        bloqueado: false
      }
    ];

    // Filtrar lotes com produto_id v√°lido
    const lotesValidos = lotes.filter(lote => lote.produto_id);

    if (lotesValidos.length === 0) {
      console.log('‚ùå Nenhum lote v√°lido para inserir');
      return;
    }

    const { data: lotesInseridos, error: lotesError } = await supabase
      .from('lotes')
      .upsert(lotesValidos, { onConflict: 'numero_lote' })
      .select();

    if (lotesError) {
      console.error('‚ùå Erro ao inserir lotes:', lotesError.message);
      return;
    }

    console.log(`‚úÖ ${lotesInseridos?.length || 0} lotes inseridos`);

    // Verificar resultado final
    console.log('\n4. Verificando dados inseridos...');
    const { data: verificacao, error: verificacaoError } = await supabase
      .from('lotes')
      .select(`
        *,
        produtos (
          id,
          nome,
          sku,
          unidade
        )
      `)
      .order('created_at', { ascending: false });

    if (verificacaoError) {
      console.error('‚ùå Erro na verifica√ß√£o:', verificacaoError.message);
      return;
    }

    console.log(`üìä Total de lotes no banco: ${verificacao?.length || 0}`);
    
    if (verificacao && verificacao.length > 0) {
      console.log('\nüì¶ Lotes encontrados:');
      verificacao.slice(0, 5).forEach((lote, index) => {
        console.log(`   ${index + 1}. ${lote.numero_lote}`);
        console.log(`      Produto: ${lote.produtos?.nome || 'N/A'}`);
        console.log(`      Quantidade: ${lote.quantidade_atual}/${lote.quantidade_inicial}`);
        console.log('      ---');
      });
    }

    console.log('\nüéâ Processo conclu√≠do!');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

insertSampleDataSQL();